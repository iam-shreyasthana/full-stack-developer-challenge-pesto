import React, { useState, useEffect } from 'react';
import TaskForm from '../components/TaskForm';
import TaskList from '../components/TaskList';
import TaskFilter from '../components/TaskFilter';
import Head from 'next/head';
import styles from "../styles/Home.module.css";
import axios from 'axios';

const API_BASE_URL = process.env.NEXT_PUBLIC_TASK_MANAGER_MICROSERVICE;

export default function Home() {
  const [tasks, setTasks] = useState([]);
  const [filteredTasks, setFilteredTasks] = useState([]);
  const [filterStatus, setFilterStatus] = useState('all');

  useEffect(() => {
    fetchTasks();
  }, []);

  const fetchTasks = async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/tasks`);
      setTasks(response.data);
      filterTasks(filterStatus, response.data);
    } catch (error) {
      console.error('Error fetching tasks:', error.message);
    }
  };

  const addTask = async (newTask) => {
    try {
      const response = await axios.post(`${API_BASE_URL}/tasks/add`, newTask);
      setTasks([...tasks, response.data]);
    } catch (error) {
      console.error('Error adding task:', error.message);
    }
  };


  const updateTask = async (updatedTask) => {
    try {
      const response = await axios.post(`${API_BASE_URL}/tasks/update/${updatedTask._id}`, { status: updatedTask.status });
      const updatedTaskIndex = tasks.findIndex((task) => task._id === updatedTask._id);
      const updatedTasks = [...tasks];
      updatedTasks[updatedTaskIndex] = response.data;
      setTasks(updatedTasks);
      filterTasks(filterStatus, updatedTasks);
    } catch (error) {
      console.error('Error updating task:', error.message);
    }
  };

  const deleteTask = async (taskId) => {
    try {
      debugger
      await axios.post(`${API_BASE_URL}/tasks/delete/${taskId}`);
      const updatedTasks = tasks.filter((task) => task._id !== taskId);
      setTasks(updatedTasks);
      filterTasks(filterStatus, updatedTasks);
    } catch (error) {
      console.error('Error deleting task:', error.message);
    }
  };

  const filterTasks = (status, tasksList) => {
    if (status === 'all') {
      setFilteredTasks(tasksList);
    } else {
      const filtered = tasksList.filter((task) => task.status === status);
      setFilteredTasks(filtered);
    }
  };

  const statuses = ['To Do', 'In Progress', 'Done'];

  return (
    <>
      <Head>
        <title>Full-Stack Developer Challenge</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} poppins-regular`}>
        <div className={styles.innerContainer}>
          <h1>Task Management Application</h1>
          <TaskForm onSubmit={addTask} />
          <TaskFilter statuses={statuses} onSelectStatus={setFilterStatus} />
          <TaskList
            tasks={filterStatus === 'all' ? tasks : filteredTasks}
            onUpdate={updateTask}
            onDelete={deleteTask}
          />
        </div>
      </main>
    </>
  );
}
