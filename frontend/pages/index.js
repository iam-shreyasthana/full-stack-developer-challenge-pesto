import React, { useState, useEffect } from 'react';
import TaskForm from '../components/TaskForm';
import TaskList from '../components/TaskList';
import TaskFilter from '../components/TaskFilter';

export default function Home() {
  const [tasks, setTasks] = useState([]);
  const [filteredTasks, setFilteredTasks] = useState([]);
  const [filterStatus, setFilterStatus] = useState('all');

  useEffect(() => {
    fetchTasks();
  }, []);

  const fetchTasks = async () => {
    try {
      const response = await fetch('/api/tasks');
      if (!response.ok) {
        throw new Error('Failed to fetch tasks');
      }
      const data = await response.json();
      setTasks(data);
      filterTasks(filterStatus, data);
    } catch (error) {
      console.error('Error fetching tasks:', error.message);
    }
  };

  const addTask = async (newTask) => {
    try {
      const response = await fetch('/api/tasks', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newTask),
      });
      if (!response.ok) {
        throw new Error('Failed to add task');
      }
      const data = await response.json();
      setTasks([...tasks, data]);
    } catch (error) {
      console.error('Error adding task:', error.message);
    }
  };

  const updateTask = async (updatedTask) => {
    try {
      const response = await fetch(`/api/tasks/${updatedTask._id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updatedTask),
      });
      if (!response.ok) {
        throw new Error('Failed to update task');
      }
      const updatedTaskIndex = tasks.findIndex((task) => task._id === updatedTask._id);
      const updatedTasks = [...tasks];
      updatedTasks[updatedTaskIndex] = updatedTask;
      setTasks(updatedTasks);
      filterTasks(filterStatus, updatedTasks);
    } catch (error) {
      console.error('Error updating task:', error.message);
    }
  };

  const deleteTask = async (taskId) => {
    try {
      const response = await fetch(`/api/tasks/${taskId}`, {
        method: 'DELETE',
      });
      if (!response.ok) {
        throw new Error('Failed to delete task');
      }
      const updatedTasks = tasks.filter((task) => task._id !== taskId);
      setTasks(updatedTasks);
      filterTasks(filterStatus, updatedTasks);
    } catch (error) {
      console.error('Error deleting task:', error.message);
    }
  };

  const filterTasks = (status, tasksList) => {
    if (status === 'all') {
      setFilteredTasks(tasksList);
    } else {
      const filtered = tasksList.filter((task) => task.status === status);
      setFilteredTasks(filtered);
    }
  };

  const statuses = ['all', 'To Do', 'In Progress', 'Done'];

  return (
    <>
      <Head>
        <title>Full-Stack Developer Challenge</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div>
          <h1>Task Management Application</h1>
          <TaskForm onSubmit={addTask} />
          <TaskFilter statuses={statuses} onSelectStatus={setFilterStatus} />
          <TaskList
            tasks={filterStatus === 'all' ? tasks : filteredTasks}
            onUpdate={updateTask}
            onDelete={deleteTask}
          />
        </div>
      </main>
    </>
  );
}
